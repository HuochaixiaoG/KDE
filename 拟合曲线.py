import matplotlib.pyplot as plt
import matplotlib
import numpy as np
import pylab as mpl
from scipy import optimize as op
from sklearn import metrics 
from scipy.stats import kstest

matplotlib.rcParams['font.family'] = 'STKAITI' #'STKAITI'——字体
plt.rcParams['axes.unicode_minus'] = False   # 解决坐标轴负数的负号显示问题

#y为原始数据，y2为拟合数据
def wuchajisuan(y,y2):
    ks = kstest(y, y2)[1]
    print('k-s=',ks)

    #决定系数R2(coefficient of determination) regression score function.
    #接近1
    r2 = metrics.r2_score(y, y2)
    print('r2 =',r2)

    #平均绝对误差MAE(Mean Absolute Error)
    #接近0
    mae = metrics.mean_absolute_error(y, y2)
    print('mae = ',mae)

    #均方误差MSE(mean-square error) 
    #接近0
    mse = metrics.mean_squared_error(y, y2)
    print('mse = ',mse)

    #均方根误差（Root Mean Square Error）
    #接近0
    rmse = mse**0.5
    print('rmse = ',rmse)

    #平均绝对百分误差(MAPE)Mean absolute percentage error  regression loss.
    #接近0
    mape = metrics.mean_absolute_percentage_error(y, y2)
    print('mape = ',mape)

    print(r2,mae,mse,rmse,mape)

e = 2.71828
pi = 3.14159

#print(x)
# y = sorted([3.8,4.6,5.1,5.7,6.9,13.7,18,29.2,40.9,66.7,79.8,123.4,136,143.3,161.5,227.6,262.5])
# x = np.arange(1,len(y)+1)

# y = [0.0047169811320754715, 0.014150943396226415, 0.02358490566037736, 0.0330188679245283, 
# 0.04245283018867924, 0.05188679245283019, 0.06132075471698113, 0.07075471698113207, 
# 0.08018867924528301, 0.08962264150943396, 0.09905660377358491, 0.10849056603773585, 
# 0.1179245283018868, 0.12735849056603774, 0.13679245283018868, 0.14622641509433962, 
# 0.15566037735849056, 0.1650943396226415, 0.17452830188679244, 0.18396226415094338, 
# 0.19339622641509435, 0.2028301886792453, 0.21226415094339623, 0.22169811320754718, 
# 0.23113207547169812, 0.24056603773584906, 0.25, 0.25943396226415094, 0.2688679245283019,
#  0.2783018867924528, 0.28773584905660377, 0.2971698113207547, 0.30660377358490565, 
# 0.3160377358490566, 0.32547169811320753, 0.33490566037735847, 0.3443396226415094, 
# 0.35377358490566035, 0.3632075471698113, 0.37264150943396224, 0.38207547169811323, 
# 0.3915094339622642, 0.4009433962264151, 0.41037735849056606, 0.419811320754717, 
# 0.42924528301886794, 0.4386792452830189, 0.4481132075471698, 0.45754716981132076, 
# 0.4669811320754717, 0.47641509433962265, 0.4858490566037736, 0.49528301886792453, 
# 0.5047169811320755, 0.5141509433962265, 0.5235849056603774, 0.5330188679245284, 
# 0.5424528301886793, 0.5518867924528302, 0.5613207547169812, 0.5707547169811321, 
# 0.5801886792452831, 0.589622641509434, 0.5990566037735849, 0.6084905660377359, 
# 0.6179245283018868, 0.6273584905660378, 0.6367924528301887, 0.6462264150943396, 
# 0.6556603773584906, 0.6650943396226415, 0.6745283018867925, 0.6839622641509434, 
# 0.6933962264150944, 0.7028301886792453, 0.7122641509433962, 0.7216981132075472, 
# 0.7311320754716981, 0.7405660377358491, 0.75, 0.7594339622641509, 0.7688679245283019, 
# 0.7783018867924528, 0.7877358490566038, 0.7971698113207547, 0.8066037735849056, 
# 0.8160377358490566, 0.8254716981132075, 0.8349056603773585, 0.8443396226415094, 
# 0.8537735849056604, 0.8632075471698113, 0.8726415094339622, 0.8820754716981132, 
# 0.8915094339622641, 0.9009433962264151, 0.910377358490566, 0.9198113207547169, 
# 0.9292452830188679, 0.9386792452830188, 0.9481132075471698, 0.9575471698113207, 
# 0.9669811320754716, 0.9764150943396226, 0.9858490566037735, 0.9952830188679245]
y = []
x = [-1.6607312068216509, 2.669082755281701, 5.428070660083032, 5.980013645360831, 
6.586237576894888, 6.861739011440285, 6.936984806222397, 7.123229411058654, 
7.400346860870777, 7.424401080292055, 7.44159886995826, 7.444938458870658, 
7.4614815231524085, 7.71510575307896, 7.737430085354904, 7.898491646729512, 
8.273240061089103, 8.352275647454093, 8.43915715288487, 8.474681264165646, 
8.517928756365105, 8.530548913057372, 8.588726321870812, 8.6294057994337, 
8.667035648557887, 8.67031412213415, 8.689501821084555, 8.69261338592473, 
8.703368945509162, 8.710348954028383, 8.757714704339833, 8.7752672047049, 
8.809062095604476, 8.930506092811608, 8.945646514786677, 8.98277949244596, 
9.023680994848275, 9.035955834401388, 9.074467116625899, 9.170628764379979, 
9.188295401919355, 9.201970978726042, 9.20451959954422, 9.252246907943656, 
9.256121542638834, 9.28474635236717, 9.291520083480707, 9.30818768376877, 
9.31716770649584, 9.363497049570467, 9.389340619781004, 9.39943586124285, 
9.413434379428779, 9.434115759448522, 9.435628835791041, 9.43901486683797, 
9.441559958427312, 9.489638645286394, 9.49802980197766, 9.507891019640791, 
9.5087380424712, 9.509026131629184, 9.516108996483222, 9.549048033344626, 
9.611150661878145, 9.657978472397858, 9.707684751486104, 9.720279516565933, 
9.774834805908611, 9.778107310074683, 9.829799418461969, 9.872531005382777, 
9.898844585489735, 9.930901907333448, 9.949697306808375, 9.972163962407576, 
9.973103313452679, 10.001823644086915, 10.011304489857201, 10.047003278932758, 
10.120703454598853, 10.2080333637592, 10.226630727317547, 10.228195896151064, 
10.237926120459274, 10.283715102583622, 10.298665089725366, 10.305012852627888, 
10.305702182155096, 10.310001795044496, 10.311292907856142, 10.337848516491487, 
10.371142061106067, 10.373493075511632, 10.385731117304976, 10.388715354201265, 
10.409874083469578, 10.485009987878597, 10.493798323676762, 10.545807962586434, 
10.553470427698977, 10.732618457911135, 10.746483346555497, 10.758865375007584, 
10.772399553897722, 12.020487368591022]

#变量一定要放在第一个位置
def func(x, Sigma, mu):
    e = 2.71828
    pi = 3.14159
    return ((e**(-(x-mu)*(x-mu))/(2*Sigma*Sigma))/(((2*pi)**0.5)*Sigma))

def func1(x,a,b):
    return a/(1+x**b)  

def func2(x,a,b):
    e = 2.71828
    return a*(e**(-0.5*(np.log(x)/b)*(np.log(x)/b)))

def func3(x, Sigma, mu):
    e = 2.71828
    pi = 3.14159
    return (e**(-(np.log(x)-mu)*(np.log(x)-mu)/(2*Sigma*Sigma)))/(((2*pi)**0.5)*Sigma*x)

def func4(x,a,b):
    e = 2.71828
    #y = aln(x)
    return a*np.log(x)

# popt, pcov = op.curve_fit(func, x, y) #p0 = 1是因为只有a一参数
# print(popt) #即参数a的最佳值
# print(pcov)
# for i in x:
#     y.append(func(i, 0.87, 2.62))

# y2 = []
# # y2 = func(x,popt[0],popt[1])
# #wuchajisuan(y,y2)
# x2 = np.linspace(-5,15,1000)

# for i in x2:
#     y2.append(func(i, 0.87, 2.62))
# print(sum(y2)/106)

# plt.scatter(x, y, marker='x',lw=1,label='原始数据')
# plt.plot(x2,y2,c='r',label='拟合曲线')
# plt.legend() # 显示label
# plt.show()

