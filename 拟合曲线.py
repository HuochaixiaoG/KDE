import matplotlib.pyplot as plt
import matplotlib
import numpy as np
import pylab as mpl
from scipy import optimize as op
from sklearn import metrics 
from scipy.stats import kstest

matplotlib.rcParams['font.family'] = 'STKAITI' #'STKAITI'——字体
plt.rcParams['axes.unicode_minus'] = False   # 解决坐标轴负数的负号显示问题

#y为原始数据，y2为拟合数据
def wuchajisuan(y,y2):
    ks = kstest(y, y2)[1]
    print('k-s=',ks)

    #决定系数R2(coefficient of determination) regression score function.
    #接近1
    r2 = metrics.r2_score(y, y2)
    print('r2 =',r2)

    #平均绝对误差MAE(Mean Absolute Error)
    #接近0
    mae = metrics.mean_absolute_error(y, y2)
    print('mae = ',mae)

    #均方误差MSE(mean-square error) 
    #接近0
    mse = metrics.mean_squared_error(y, y2)
    print('mse = ',mse)

    #均方根误差（Root Mean Square Error）
    #接近0
    rmse = mse**0.5
    print('rmse = ',rmse)

    #平均绝对百分误差(MAPE)Mean absolute percentage error  regression loss.
    #接近0
    mape = metrics.mean_absolute_percentage_error(y, y2)
    print('mape = ',mape)

    print(r2,mae,mse,rmse,mape)

e = 2.71828
pi = 3.14159


y = []
x = [-1.6607312068216509, 2.669082755281701, 5.428070660083032, 5.980013645360831, 
6.586237576894888, 6.861739011440285, 6.936984806222397, 7.123229411058654, 
7.400346860870777, 7.424401080292055, 7.44159886995826, 7.444938458870658, 
7.4614815231524085, 7.71510575307896, 7.737430085354904, 7.898491646729512, 
8.273240061089103, 8.352275647454093, 8.43915715288487, 8.474681264165646, 
8.517928756365105, 8.530548913057372, 8.588726321870812, 8.6294057994337, 
8.667035648557887, 8.67031412213415, 8.689501821084555, 8.69261338592473, 
8.703368945509162, 8.710348954028383, 8.757714704339833, 8.7752672047049, 
8.809062095604476, 8.930506092811608, 8.945646514786677, 8.98277949244596, 
9.023680994848275, 9.035955834401388, 9.074467116625899, 9.170628764379979, 
9.188295401919355, 9.201970978726042, 9.20451959954422, 9.252246907943656, 
9.256121542638834, 9.28474635236717, 9.291520083480707, 9.30818768376877, 
9.31716770649584, 9.363497049570467, 9.389340619781004, 9.39943586124285, 
9.413434379428779, 9.434115759448522, 9.435628835791041, 9.43901486683797, 
9.441559958427312, 9.489638645286394, 9.49802980197766, 9.507891019640791, 
9.5087380424712, 9.509026131629184, 9.516108996483222, 9.549048033344626, 
9.611150661878145, 9.657978472397858, 9.707684751486104, 9.720279516565933, 
9.774834805908611, 9.778107310074683, 9.829799418461969, 9.872531005382777, 
9.898844585489735, 9.930901907333448, 9.949697306808375, 9.972163962407576, 
9.973103313452679, 10.001823644086915, 10.011304489857201, 10.047003278932758, 
10.120703454598853, 10.2080333637592, 10.226630727317547, 10.228195896151064, 
10.237926120459274, 10.283715102583622, 10.298665089725366, 10.305012852627888, 
10.305702182155096, 10.310001795044496, 10.311292907856142, 10.337848516491487, 
10.371142061106067, 10.373493075511632, 10.385731117304976, 10.388715354201265, 
10.409874083469578, 10.485009987878597, 10.493798323676762, 10.545807962586434, 
10.553470427698977, 10.732618457911135, 10.746483346555497, 10.758865375007584, 
10.772399553897722, 12.020487368591022]

#变量一定要放在第一个位置
def func(x, Sigma, mu):
    e = 2.71828
    pi = 3.14159
    return ((e**(-(x-mu)*(x-mu))/(2*Sigma*Sigma))/(((2*pi)**0.5)*Sigma))

def func1(x,a,b):
    return a/(1+x**b)  

def func2(x,a,b):
    e = 2.71828
    return a*(e**(-0.5*(np.log(x)/b)*(np.log(x)/b)))

def func3(x, Sigma, mu):
    e = 2.71828
    pi = 3.14159
    return (e**(-(np.log(x)-mu)*(np.log(x)-mu)/(2*Sigma*Sigma)))/(((2*pi)**0.5)*Sigma*x)

def func4(x,a,b):
    e = 2.71828
    #y = aln(x)
    return a*np.log(x)



